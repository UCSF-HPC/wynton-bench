#! /usr/bin/env bash
# Suggests:
# * spark: https://github.com/holman/spark

error() {
    >&2 echo "ERROR: $*"
    exit 1
}

chdir() {
    cd "$1" || error "Failed to change directory: $1"
}

BENCH_DATA_ROOT=${BENCH_DATA_ROOT:-~/wynton-bench-logs}
HOSTNAME=${HOSTNAME:-qb3-dev3}

[[ -d "$BENCH_DATA_ROOT" ]] || error "No such folder: ${BENCH_DATA_ROOT}"
[[ -n "$HOSTNAME" ]] || error "HOSTNAME is empty"

BENCH_DATA_PATH=${BENCH_DATA_ROOT}/${HOSTNAME}
[[ -d "$BENCH_DATA_PATH" ]] || exit 0

format=${FORMAT:-spark}
reverse=false
width=$(tput cols)

TEST_DRIVE=${TEST_DRIVE:-wynton_scratch}
n=$((width-1))

## Load signals
bench_logs=$(tail -n 2100 "$BENCH_DATA_PATH/bench-files-tarball__${TEST_DRIVE}.log")
total_time_entries=$(echo "${bench_logs}" | grep -F "total_time" | sed -E 's/(.compbio.ucsf.edu|echo total_time=| seconds|-07:00)//g')
times=$(echo "${total_time_entries}" | cut -d $'\t' -f 1 | sed -E 's/-[0-9]{2}:[0-9]{2}$//g')
date=($(echo "${times}" | cut -d ' ' -f 1))
today=$(date --iso-8601)
hhmm=($(echo "${times}" | cut -d ' ' -f 2 | sed -E 's/:[0-9]{2}$//g'))
past=${hhmm[0]}
now=${hhmm[-1]}
signals=($(echo "${total_time_entries}" | cut -d $'\t' -f 21))
#echo "signals=${signals[@]}"
signals=(${signals[@]:0:$n})
$reverse && signals=($(printf '%s\n' "${signals[@]}" | tac | tr '\n' ' '))


range=($(echo "${signals[@]}" | awk '{ count[NR] = $1; asort(count); min=1e12; max=-1e12; sum=0; for (v=1; v<=NF; v++) { min=(min<$v?min:$v); max=(max>$v?max:$v); sum+=$v }; if (NR % 2) { median = count[(NR + 1) / 2]; } else { median = (count[(NR / 2)] + count[(NR / 2) + 1]) / 2.0; } } END { print min, max, sum/NF, median; }'
))
if [[ "$format" == "int" ]]; then
  data=$(printf "%0.f " "${signals[@]}")
elif [[ "$format" == "dbl" ]]; then
  data=$(echo "${signals[@]}")
elif [[ "$format" == "spark" ]]; then
  data=$(~/bin/spark "100 ${signals[@]}")
fi


if $reverse; then
    period="$now-$past "
else    
    period="$past-$now "
fi
if [[ "${date[-1]}" != "$today" ]]; then
    period="$date $period"
fi    
label=${LABEL:-" [/${TEST_DRIVE//_//}] "}
range=$(printf " ~%.3gs [%.3gs,%.3gs]" "${range[3]}" "${range[0]}" "${range[1]}")
pad=$((${#data}-1 - ${#period} - ${#label} - ${#range}))
padL=$((${pad}/2))
padR=$((${pad} - ${padL}))

printf "%s\n" "$data"
if $reverse; then
    printf "%s%*s%s%*s%s\n" "$period" "$padL" "" "$label" "$padR" "" "$range"
else    
    printf "%s %*s%s%*s%s\n" "$period" "$padL" "" "$label" "$padR" "" "$range"
fi    

